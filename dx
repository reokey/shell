#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
dx_ver="2018.06.26"
g="\033[32m"
y="\033[33m"
t="\033[0m"

#检测系统
get_opsy() {
    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return
    [ -f /etc/os-release ] && awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return
    [ -f /etc/lsb-release ] && awk -F'[="]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return
}
opsy=$( get_opsy )
arch=$( uname -m )
lbit=$( getconf LONG_BIT )
kern=$( uname -r )

#检测软件
check_Python()
{
V1=2
V2=6
V3=5
U_V1=`python -V 2>&1|awk '{print $2}'|awk -F '.' '{print $1}'`
U_V2=`python -V 2>&1|awk '{print $2}'|awk -F '.' '{print $2}'`
U_V3=`python -V 2>&1|awk '{print $2}'|awk -F '.' '{print $3}'`
#	if [ $U_V1 -lt $V1 ];then
#		echo 'Your python version is not OK!(1)'
#		exit 1
#	elif [ $U_V1 -eq $V1 ];then     
#		if [ $U_V2 -lt $V2 ];then 
#			echo 'Your python version is not OK!(2)'
#			exit 1
#		elif [ $U_V2 -eq $V2 ];then
#			if [ $U_V3 -lt $V3 ];then 
#				echo 'Your python version is not OK!(3)'
#				exit 1
#			fi
#		fi
#	fi
#	echo Your python version is OK!
}
check_v01()
{
	v01=wget
	x=`rpm -qa | grep $v01`
	if [ `rpm -qa | grep $v01 |wc -l` -ne 0 ];then
	s01="$v01       - $st1"
	else
	s01="$v01       - $st2"
	fi
}
check_v02()
{
	v02=curl
	x=`rpm -qa | grep $v02`
	if [ `rpm -qa | grep $v02 |wc -l` -ne 0 ];then
	s02="$v02       - $st1"
	else
	s02="$v02       - $st2"
	fi
}
check_v03()
{
	v03=git
	x=`rpm -qa | grep $v03`
	if [ `rpm -qa | grep $v03 |wc -l` -ne 0 ];then
	s03="$v03        - $st1"
	else
	s03="$v03        - $st2"
	fi
}
check_v04()
{
	v04=pip
	x=`rpm -qa | grep $v04`
	if [ `rpm -qa | grep $v04 |wc -l` -ne 0 ];then
	s04="$v04        - $st1"
	else
	s04="$v04        - $st2"
	fi
}
check_v05()
{
	v05=gcc
	x=`rpm -qa | grep $v05`
	if [ `rpm -qa | grep $v05 |wc -l` -ne 0 ];then
	s05="$v05        - $st1"
	else
	s05="$v05        - $st2"
	fi
}
check_v06()
{
	v06=make
	x=`rpm -qa | grep $v06`
	if [ `rpm -qa | grep $v06 |wc -l` -ne 0 ];then
	s06="$v06       - $st1"
	else
	s06="$v06       - $st2"
	fi
}
check_v07()
{
	v07=screen
	x=`rpm -qa | grep $v07`
	if [ `rpm -qa | grep $v07 |wc -l` -ne 0 ];then
	s07="$v07     - $st1"
	else
	s07="$v07     - $st2"
	fi
}

#一键更新脚本
update_dx_menu(){
	clear
	menu_ver
	echo -e "$y当前版本为 [ ${dx_ver} ],按[任意键]开始更新版本,或按 Ctrl+C 取消.$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		*)
			dx_new_ver=$(wget --no-check-certificate -qO- "https://raw.githubusercontent.com/reokey/shell/master/dx"|grep 'dx_ver="'|awk -F "=" '{print $NF}'|sed 's/\"//g'|head -1)
			[[ -z ${dx_new_ver} ]] && echo -e "${Error} 检测最新版本失败 !" && exit 0
			
			if [[ ${dx_new_ver} != ${dx_ver} ]]; then
				clear
				menu_ver
				echo -e "$y发现新版本[ ${dx_new_ver} ]，按[任意键]开始更新，或按 Ctrl+C 取消$t"
				read -n1 -p "" answer
				case $answer in
					+)
						dx_menu
						;;
					-)
						exit
						;;
					*)
						wget -N --no-check-certificate https://raw.githubusercontent.com/reokey/shell/master/dx && chmod +x dx
						clear
						menu_ver
						echo -e "$y脚本已更新为最新版本[ ${dx_new_ver} ] !$t"
						;;
				esac
				exit 0
			else
			clear
			menu_ver
			echo -e "$y当前已是最新版本[ ${dx_new_ver} ]!$t"
			correct_command
			fi
			;;
	esac
	exit 0
}

#脚本必备组件
reokey_module(){
	clear
	menu_ver
	echo -e "$g───────────────────────────────── 一 键 必 备  ─────────────────────────────────$t"
	#检测软件
	st1=已安装
	st2=未装或未被检测
	check_v01
	echo -e "$g  $s01 $t"
	check_v02
	echo -e "$g  $s02 $t"
	check_v03
	echo -e "$g  $s03 $t"
	check_v04
	echo -e "$g  $s04 $t"
	check_v05
	echo -e "$g  $s05 $t"
	check_v06
	echo -e "$g  $s06 $t"
	check_v07
	echo -e "$g  $s07 $t"
	echo
	opst="检测当前系统为$opsy $lbit位 请按任意键继续... 主菜单+ / 退出-"
	if [[ -f /etc/redhat-release ]]; then
		module_centos
	elif cat /etc/issue | grep -q -E -i "debian"; then
		module_debian
	elif cat /etc/issue | grep -q -E -i "ubuntu"; then
		module_ubuntu
	elif cat /etc/issue | grep -q -E -i "centos|red hat|redhat"; then
		module_centos
	elif cat /proc/version | grep -q -E -i "debian"; then
		module_debian
	elif cat /proc/version | grep -q -E -i "ubuntu"; then
		module_ubuntu
	elif cat /proc/version | grep -q -E -i "centos|red hat|redhat"; then
		module_centos
	fi
}

#脚本必备组件centos
module_centos(){
	echo -e "$g当前系统为 Centos $lbit位 请按任意键继续...主菜单+ / 退出-$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		*)
			yum -y install reinstall gcc gcc-c++ bzip2 make vixie-cron flex ncurses-devel wget patch ntp libxml2 libxml2-devel libevent m4 autoconf zip unzip libjpeg libjpeg-devel gd gd-devel freetype freetype-devel libpng libpng-devel openssl openssl-devel file libtool libtool-libs gmp-devel pspell-devel parted zlib perl mod_perl-devel apr-util ftp readline-devel readline-devel apr apr-util curl-devel screen
			reokey_module
			#yum -y reinstall gcc gcc-c++ bzip2 make vixie-cron flex ncurses-devel wget patch ntp libxml2 libxml2-devel libevent m4 autoconf zip unzip libjpeg libjpeg-devel gd gd-devel freetype freetype-devel libpng libpng-devel openssl openssl-devel file libtool libtool-libs gmp-devel pspell-devel parted zlib perl mod_perl-devel apr-util ftp readline-devel readline-devel apr apr-util curl-devel
			;;
	esac
	exit 0
}

#脚本必备组件debian
module_debian(){
	echo -e "$g当前系统为 Debian $lbit位 请按任意键继续...主菜单+ / 退出-$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		*)
			apt-get -y install gcc g++ ssh make bzip2 flex vim bison libtool libncurses5-dev libncurses5 libncurses5-dev libncurses5-dev libpcrecpp0 patch ntpdate openssl libssl-dev build-essential file gawk binutils parted zip unzip libperl-dev perl ftp libreadline-dev screen
			reokey_module
			#apt-get -y install gcc g++ ssh make bzip2 flex vim bison libtool libncurses5-dev libncurses5 libncurses5-dev libncurses5-dev libpcrecpp0 patch ntpdate openssl libssl-dev build-essential file gawk binutils parted zip unzip libperl-dev perl ftp libreadline-dev
			;;
	esac
	exit 0
}

#脚本必备组件ubuntu
module_ubuntu(){
	echo -e "$g当前系统为 Ubuntu $lbit位 请按任意键继续...主菜单+ / 退出-$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		*)
			apt-get -y install gcc g++ ssh make bzip2 flex vim bison libtool libncurses5-dev libncurses5 libncurses5-dev libncurses5-dev libpcrecpp0 patch ntpdate openssl libssl-dev build-essential file gawk binutils parted zip unzip libperl-dev perl ftp libreadline-dev screen
			reokey_module
			#apt-get -y install gcc g++ ssh make bzip2 flex vim bison libtool libncurses5-dev libncurses5 libncurses5-dev libncurses5-dev libpcrecpp0 patch ntpdate openssl libssl-dev build-essential file gawk binutils parted zip unzip libperl-dev perl ftp libreadline-dev
			;;
	esac
	exit 0
}

#一键更换系统
reokey_os(){
	title=" 一键更换系统 "
	author="萌咖"
	source="https://moeclub.org/2018/04/03/603/?v=244"
	release=未选
	framework=未选
	version=未选
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y请选择系统发行版本 [1]Centos [2]Debian [3]Ubuntu [4]Windows:$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		1)
			release=-c
			reokey_os_centos
			;;
		2)
			release=-d
			reokey_os_debian
			;;
		3)
			release=-u
			reokey_os_ubuntu
			;;
		4)
			release=-w
			reokey_os_windows
			;;
		*)
			reokey_os
			;;
	esac
}
#一键更换系统-选择构架
reokey_os_centos(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y继续选择系统构架 [1]64位 [2]32位$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		1)
			framework=64
			reokey_os_centos_64
			;;
		2)
			framework=32
			reokey_os_centos_32
			;;
		*)
			reokey_os_centos
			;;
	esac
}
reokey_os_debian(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y继续选择系统构架 [1]64位 [2]32位$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		1)
			framework=64
			reokey_os_debian_64
			;;
		2)
			framework=32
			reokey_os_debian_32
			;;
		*)
			reokey_os_debian
			;;
	esac
}
reokey_os_ubuntu(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y继续选择系统构架 [1]64位 [2]32位$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		1)
			framework=64
			reokey_os_ubuntu_64
			;;
		2)
			framework=32
			reokey_os_ubuntu_32
			;;
		*)
			reokey_os_ubuntu
			;;
	esac
}
reokey_os_windows(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y继续选择系统构架 [1]64位 [2]32位$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		1)
			framework=64
			reokey_os_windows_64
			;;
		2)
			framework=32
			reokey_os_windows_32
			;;
		*)
			reokey_os_windows
			;;
	esac
}
#一键更换系统-选择版本
reokey_os_centos_64(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Centos6.8 [2]Centos5.8$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=6.8
				reokey_os_install
				;;
			2)
				version=5.8
				reokey_os_install
				;;
			*)
				reokey_os_centos_64
				;;
		esac
}
reokey_os_centos_32(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Centos6.8 [2]Centos5.8$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=6.8
				reokey_os_install
				;;
			2)
				version=5.8
				reokey_os_install
				;;
			*)
				reokey_os_centos_32
				;;
		esac
}
reokey_os_debian_64(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Debian7 [2]Debian8 [3]Debian9$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=7
				reokey_os_install
				;;
			2)
				version=8
				reokey_os_install
				;;
			3)
				version=9
				reokey_os_install
				;;
			*)
				reokey_os_debian_64
				;;
		esac
}
reokey_os_debian_32(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Debian7 [2]Debian8 [3]Debian9$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=7
				reokey_os_install
				;;
			2)
				version=8
				reokey_os_install
				;;
			3)
				version=9
				reokey_os_install
				;;
			*)
				reokey_os_debian_32
				;;
		esac
}
reokey_os_ubuntu_64(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Ubuntu 18.04 [2]Ubuntu 16.04 [3]Ubuntu 14.04$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=18.04
				reokey_os_install
				;;
			2)
				version=16.04
				reokey_os_install
				;;
			3)
				version=14.04
				reokey_os_install
				;;
			*)
				reokey_os_ubuntu_64
				;;
		esac
}
reokey_os_ubuntu_32(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Ubuntu 18.04 [2]Ubuntu 16.04 [3]Ubuntu 14.04$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=18.04
				reokey_os_install
				;;
			2)
				version=16.04
				reokey_os_install
				;;
			3)
				version=14.04
				reokey_os_install
				;;
			*)
				reokey_os_ubuntu_32
				;;
		esac
}
reokey_os_windows_64(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Windows Server 2012 [2]Windows Server 2016$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=2012
				reokey_os_install
				;;
			2)
				version=2016
				reokey_os_install
				;;
			*)
				reokey_os_windows_64
				;;
		esac
}
reokey_os_windows_32(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo
	echo -e "$y最后敲定系统版本 [1]Windows Server 2012 [2]Windows Server 2016$t"
		read -n1 -p "" answer
		case $answer in
			+)
				dx_menu
				;;
			-)
				exit
				;;
			1)
				version=2003
				reokey_os_install
				;;
			2)
				version=2008
				reokey_os_install
				;;
			*)
				reokey_os_windows_32
				;;
		esac
}
#一键更换系统-开始安装
reokey_os_install(){
	clear
	menu_ver
	menu_author
	echo
	echo -e "$g目前参数:$t"
	echo -e "$g系统 $release  构架 $framework  版本 $version$t"
	echo -e "$y已经确定全部参数,按[任意键]开始安装,密码[Vicer]$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		*)
			curl -# -o dxhz7 https://raw.githubusercontent.com/reokey/shell/master/data/dxhz7
			sh dxhz7
			bash dxhz7 $release $version -v $framework -a
			;;
	esac
}

#一键升级内核
reokey_kernel(){
	clear
	menu_ver
	echo -e "$y升级内核组件[ ${dx_ver} ]!$t"
	echo -e "$y———————————————————————————$t"
	echo -e "$y 7.  一键安装最新内核开启BBR$t"
	echo -e "$y 8.  卸载旧kernel及相关$t"
	echo -e "$y 9.  查看当前kernel信息$t"
	echo -e "$y———————————————————————————$t"
	echo
	echo
	echo
	echo -e "$g 请输入 [7-9]:$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		7)
			curl -# -o dxhz8 https://raw.githubusercontent.com/reokey/shell/master/data/dxhz8
			sh dxhz8
			;;
		8)
			yum remove *kernel* -y
			yum --enablerepo=elrepo-kernel install kernel-ml-headers kernel-ml-tools kernel-ml-tools-libs -y
			yum install dracut-kernel -y
			reokey_kernel
			;;
		9)
			echo -ne "\r     \r"
			clear
			menu_ver
			echo -e "$y当前kernel信息$t"
			echo
			rpm -qa |grep kernel
			echo
			echo -e "$g [任意键]返回:$t"
				read -n1 -p "" answer
				case $answer in
					*)
					reokey_kernel
					;;
				esac
			;;
		*)
		error_command
		;;
	esac
	exit 0
}

#显示默认菜单
dx_menu(){
clear
menu_ver
menu_display
menu_explain
menu_number
}

#显示一键说明
dx_explain(){
clear
menu_ver
menu_display
menu_explain
menu_number
}

#显示软件列表
dx_list(){
clear
menu_ver
menu_display
menu_explain
menu_number
}




#菜单头部
menu_ver(){
	check_Python
	clear_command
	echo -e "$g┌───── https://t.me/daxihanze LINUX管理脚本 Ver ${dx_ver} TG:daxihanze ───────┐$t"
	echo -e "$g│  昨天的梦里，                                                                │$t"
	echo -e "$g│      小熊坐在狮子身上哭泣。                                                  │$t"
	echo -e "$g│          他们告诉我，                                        搬运工:达奚瀚泽 │$t"
	echo -e "$g└──────────────那只蓝色的海豚，也在梦里想念你。    至 秀一 ────────────────────┘$t"
	echo -e "$g  推荐 python$V1.$V2.$V3 当前 python$U_V1.$U_V2.$U_V3                            主菜单+ / 退出-  $t"
	echo -e "$g  系统 $opsy  架构 $arch $lbit位  内核 $kern$t"
	echo -e "$g────────────────────────────────────────────────────────────────────────────────$t"
	echo
}

#菜单主体
menu_display(){
	echo -e "$y┌──────────────────────────────────────────────────────────────────────────────┐$t"
	echo -e "$y│         7 一键更换系统         8 一键升级内核         9 一键系统优化         │$t"
	echo -e "$y│         4 一键系统安全         5 脚本必备组件         6 参考代码列表         │$t"
	echo -e "$y│         1 一键安装软件         2 一键修改配置         3 检查已装一键         │$t"
	echo -e "$y│       0 一键更新脚本       Enter 默认Y       + 主菜单       - 退出脚本       │$t"
	echo -e "$y└──────────────────────────────────────────────────────────────────────────────┘$t"
}
	
#菜单说明
menu_explain(){
	echo -e "$g┌──────────────────────────────── 脚 本 说 明  ────────────────────────────────┐$t"
	echo -e "$g│                                                                              │$t"
	echo -e "$g│    脚本为自用,网络搜集代码均已注明来源,所有命令无需二次确认                  │$t"
	echo -e "$g│    [无需回车(Enter)确认]                                                     │$t"
	echo -e "$g│    本脚本唯一发布 https://t.me/daxihanze【如作修改请删除脚本标识】           │$t"
	echo -e "$g│                                                        达奚瀚泽 TG:daxihanze │$t"
	echo -e "$g└──────────────────────────────────────────────────────────────────────────────┘$t"
}

#作者说明
menu_author(){
	echo -e "$g─────────────────────────────────$title─────────────────────────────────$t"
	echo -e "$g    作者:  $author$t"
	echo -e "$g    来源:  $source$t"
	echo -e "$g                                                   搬运工 达奚瀚泽 TG:daxihanze $t"
	echo -e "$g────────────────────────────────────────────────────────────────────────────────$t"
}

#菜单列表
menu_list(){
	echo -e "$g┌──────────────────────────────── 软 件 命 令  ────────────────────────────────┐$t"
	echo -e "$g│    a Aria2        b 即将添加    c 即将添加    d Docker      e 即将添加       │$t"
	echo -e "$g│    f Fikkerd,Frp  g Git,GDlist  h Hass,H5ai   i 即将添加    j 即将添加       │$t"
	echo -e "$g│    k Kms          l Lnmp        m 即将添加    n 即将添加    o OneinStack     │$t"
	echo -e "$g│    p Python       q 即将添加    r Rclone      s Shadowsocks t 即将添加       │$t"
	echo -e "$g│    u 即将添加     v VMess       w 即将添加    x 即将添加    y 即将添加       │$t"
	echo -e "$g└──────────────────────────────────────────────────────────────────────────────┘$t"
}

#数字菜单命令
menu_number(){
	clear_command
	echo -e "$g 请输入 [0-9]:$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		0)
			update_dx_menu
			;;
		1)
			reokey_install
			;;
		2)
			reokey_set
			;;
		3)
			reokey_check
			;;
		4)
			reokey_security
			;;
		5)
			reokey_module
			;;
		6)
			reokey_resources
			;;
		7)
			reokey_os
			;;
		8)
			reokey_kernel
			;;
		9)
			reokey_optimize
			;;
		*)
			error_command
			;;
	esac
	exit 0
}

#字母菜单命令
menu_letter(){
	clear_command
	echo -e "$g 请输入 [a-z]:$t"
	read -n1 -p "" answer
	case $answer in
		+)
			dx_menu
			;;
		-)
			exit
			;;
		A|a)
			echo "即将添加"
			;;
		B|b)
			echo "即将添加"
			;;
		C|c)
			echo "即将添加"
			;;
		D|d)
			echo "即将添加"
			;;
		E|e)
			echo "即将添加"
			;;
		F|f)
			echo "即将添加"
			;;
		G|g)
			echo "即将添加"
			;;
		H|h)
			echo "即将添加"
			;;
		I|i)
			echo "即将添加"
			;;
		J|j)
			echo "即将添加"
			;;
		K|k)
			echo "即将添加"
			;;
		L|l)
			echo "即将添加"
			;;
		M|m)
			echo "即将添加"
			;;
		N|n)
			echo "即将添加"
			;;
		O|o)
			echo "即将添加"
			;;
		P|p)
			echo "即将添加"
			;;
		Q|q)
			echo "即将添加"
			;;
		R|r)
			echo "即将添加"
			;;
		S|s)
			echo "即将添加"
			;;
		T|t)
			echo "即将添加"
			;;
		U|u)
			echo "即将添加"
			;;
		V|v)
			echo "即将添加"
			;;
		W|w)
			echo "即将添加"
			;;
		X|x)
			echo "即将添加"
			;;
		Y|y)
			echo "即将添加"
			;;
		Z|z)
			echo "即将添加"
			;;
		*)
			error_command
			;;
	esac
	exit 0
}

#清理命令
clear_command(){
rm -rf dxhz*
}
	
#错误返回
error_command(){
seconds_left=3
echo -e "\033按键非指定命令,[33m${seconds_left}秒后返回主菜单.$t"
while [ $seconds_left -gt 0 ];do  
echo -n $seconds_left  
sleep 1  
seconds_left=$(($seconds_left - 1))  
echo -ne "\r     \r"
done
dx_menu
}

#正确返回
correct_command(){
seconds_left=3
echo -e "$y${seconds_left}秒后返回主菜单.$t"
while [ $seconds_left -gt 0 ];do  
echo -n $seconds_left  
sleep 1  
seconds_left=$(($seconds_left - 1))  
echo -ne "\r     \r"
done
dx_menu
}

#脚本开始
dx_menu
exit