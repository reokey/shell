#!/usr/bin/env bash
PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin
export PATH
sh_ver="2018.06.24"

#显示菜单
menu(){
checkPython
rm -rf dxhz*
clear
menu_dxhz
menu_display
menu_command
}

#系统信息
get_opsy() {
    [ -f /etc/redhat-release ] && awk '{print ($1,$3~/^[0-9]/?$3:$4)}' /etc/redhat-release && return
    [ -f /etc/os-release ] && awk -F'[= "]' '/PRETTY_NAME/{print $3,$4,$5}' /etc/os-release && return
    [ -f /etc/lsb-release ] && awk -F'[="]+' '/DESCRIPTION/{print $2}' /etc/lsb-release && return
}
opsy=$( get_opsy )
arch=$( uname -m )
lbit=$( getconf LONG_BIT )
kern=$( uname -r )

#检测Python
checkPython()
{
    #推荐版本V2.6.5
    V1=2
    V2=6
    V3=5

#echo need python version is : $V1.$V2.$V3
    
    #获取本机python版本号。这里2>&1是必须的，python -V这个是标准错误输出的，需要转换
    U_V1=`python -V 2>&1|awk '{print $2}'|awk -F '.' '{print $1}'`
    U_V2=`python -V 2>&1|awk '{print $2}'|awk -F '.' '{print $2}'`
    U_V3=`python -V 2>&1|awk '{print $2}'|awk -F '.' '{print $3}'`
    
#echo your python version is : $U_V1.$U_V2.$U_V3
    
    if [ $U_V1 -lt $V1 ];then
        echo 'Your python version is not OK!(1)'
        exit 1
    elif [ $U_V1 -eq $V1 ];then     
        if [ $U_V2 -lt $V2 ];then 
            echo 'Your python version is not OK!(2)'
            exit 1
        elif [ $U_V2 -eq $V2 ];then
            if [ $U_V3 -lt $V3 ];then 
                echo 'Your python version is not OK!(3)'
                exit 1
            fi
        fi
    fi

#echo Your python version is OK!
}

#检测软件
checkwget()
{
x=`rpm -qa | grep wget`
if [ `rpm -qa | grep wget |wc -l` -ne 0 ];then
dx_wget="已安装"
else
dx_wget="未安装"
fi
}

checkcurl()
{
x=`rpm -qa | grep curl`
if [ `rpm -qa | grep curl |wc -l` -ne 0 ];then
dx_curl="已安装"
else
dx_curl="未安装"
fi
}

checkpip()
{
x=`rpm -qa | grep pip`
if [ `rpm -qa | grep pip |wc -l` -ne 0 ];then
dx_pip="已安装"
else
dx_pip="未安装"
fi
}

checkgcc()
{
x=`rpm -qa | grep gcc`
if [ `rpm -qa | grep gcc |wc -l` -ne 0 ];then
dx_gcc="已安装"
else
dx_gcc="未安装"
fi
}

checkmake()
{
x=`rpm -qa | grep make`
if [ `rpm -qa | grep make |wc -l` -ne 0 ];then
dx_make="已安装"
else
dx_make="未安装"
fi
}

checkscreen()
{
x=`rpm -qa | grep screen`
if [ `rpm -qa | grep screen |wc -l` -ne 0 ];then
dx_screen="已安装"
else
dx_screen="未安装"
fi
}

checkgit()
{
x=`rpm -qa | grep git`
if [ `rpm -qa | grep git |wc -l` -ne 0 ];then
dx_git="已安装"
else
dx_git="未安装"
fi
}

#升级脚本
update_menu(){
	clear
	menu_dxhz
	echo -e "\033[33m  当前版本为 [ ${sh_ver} ]，开始检测最新版本...\033[0m"
	sh_new_ver=$(wget --no-check-certificate -qO- "https://raw.githubusercontent.com/reokey/shell/master/dx"|grep 'sh_ver="'|awk -F "=" '{print $NF}'|sed 's/\"//g'|head -1)
	[[ -z ${sh_new_ver} ]] && echo -e "${Error} 检测最新版本失败 !" && exit 0
	if [[ ${sh_new_ver} != ${sh_ver} ]]; then
		echo -e "\033[33m  发现新版本[ ${sh_new_ver} ]，按[回车键]开始更新，或按 Ctrl+C 取消\033[0m"
		stty erase '^H' && read -p "" yn
		[[ -z "${yn}" ]] && yn="y"
		if [[ ${yn} == [Yy] ]]; then
			wget -N --no-check-certificate https://raw.githubusercontent.com/reokey/shell/master/dx && chmod +x dx
			echo -e "\033[33m  脚本已更新为最新版本[ ${sh_new_ver} ] !\033[0m"
		else
			echo && echo -e "\033[33m  已取消...\033[0m" && echo
		fi
	else
		echo -e "\033[33m  当前已是最新版本[ ${sh_new_ver} ] !\033[0m"
	fi
}

#升级内核
update_kernel(){
	clear
	menu_dxhz
	echo -e "\033[33m                                  升 级 内 核\033[0m"
	echo
	echo -e "\033[33m    1 一键安装最新内核并开启BBR    2 卸载旧kernel以及相关\033[0m"
	echo
	echo
	echo -e "\033[32m 请输入 [0-9]:\033[0m"

read -n1 -p "" answer
case $answer in
+)
	menu
	;;
-)
	exit
	;;
1)
	rm -rf dxhz1
	curl -# -o dxhz1 https://raw.githubusercontent.com/reokey/shell/master/data/dxhz1
	sh dxhz1
	;;
2)
	yum remove *kernel* -y
	yum --enablerepo=elrepo-kernel install kernel-ml-headers kernel-ml-tools kernel-ml-tools-libs -y
	yum install dracut-kernel -y
	rpm -qa |grep kernel
	;;
*)
	echo -e "\033[31m按键非指定命令,脚本已退出.\033[0m"
	;;
esac
}

#系统优化
system_optimize(){
	clear
	menu_dxhz
	echo -e "\033[32m┌───────────────────────────────  一 键 优 化   ───────────────────────────────┐\033[0m"
	echo -e "\033[32m│                                                                              │\033[0m"
	echo -e "\033[32m│                                                                              │\033[0m"
	echo -e "\033[32m│  最后更新  2018年06月25日                                      作者:达奚瀚泽 │\033[0m"
	echo -e "\033[32m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
	echo
	echo -e "\033[32m  当前系统 - $opsy  架构 - $arch $lbit位  内核版本 - $kern\033[0m"
	echo
	echo -e "\033[33m────────────────────────────── 一键安装编译环境  ───────────────────────────────\033[0m"
	echo -e "\033[33m 1 Centos 安装\033[0m"
	echo -e "\033[33m reinstall gcc gcc-c++ bzip2 make vixie-cron flex ncurses-devel wget patch ntp\033[0m"
	echo -e "\033[33m libxml2 libxml2-devel libevent m4 autoconf zip unzip libjpeg libjpeg-devel gd\033[0m"
	echo -e "\033[33m gd-devel freetype freetype-devel libpng libpng-devel openssl openssl-devel file\033[0m"
	echo -e "\033[33m libtool libtool-libs gmp-devel pspell-devel parted zlib perl mod_perl-devel\033[0m"
	echo -e "\033[33m apr-util ftp readline-devel readline-devel apr apr-util curl-devel\033[0m"
	echo
	echo -e "\033[33m 2 Debian 安装\033[0m"
	echo -e "\033[33m install gcc g++ ssh make bzip2 flex vim bison libtool libncurses5-dev\033[0m"
	echo -e "\033[33m libncurses5 libncurses5-dev libncurses5-dev libpcrecpp0 patch ntpdate openssl\033[0m"
	echo -e "\033[33m libssl-dev build-essential file gawk binutils parted zip unzip libperl-dev perl\033[0m"
	echo -e "\033[33m ftp libreadline-dev\033[0m"
	echo
	echo -e "\033[32m 请输入 [1、2]:\033[0m"

read -n1 -p "" answer
case $answer in
+)
	menu
	;;
-)
	exit
	;;
1)
	yum -y reinstall gcc gcc-c++ bzip2 make vixie-cron flex ncurses-devel wget patch ntp libxml2 libxml2-devel libevent m4 autoconf zip unzip libjpeg libjpeg-devel gd gd-devel freetype freetype-devel libpng libpng-devel openssl openssl-devel file libtool libtool-libs gmp-devel pspell-devel parted zlib perl mod_perl-devel apr-util ftp readline-devel readline-devel apr apr-util curl-devel
	;;
2)
	apt-get -y install gcc g++ ssh make bzip2 flex vim bison libtool libncurses5-dev libncurses5 libncurses5-dev libncurses5-dev libpcrecpp0 patch ntpdate openssl libssl-dev build-essential file gawk binutils parted zip unzip libperl-dev perl ftp libreadline-dev
	;;
*)
	echo -e "\033[31m按键非指定命令,脚本已退出.\033[0m"
	;;
esac
exit 0
}

#菜单头部
menu_dxhz(){
	echo -e "\033[32m┌───── https://t.me/daxihanze LINUX管理脚本 Ver ${sh_ver} TG:daxihanze ───────┐\033[0m"
	echo -e "\033[32m│  昨天的梦里，                                                                │\033[0m"
	echo -e "\033[32m│    小熊坐在狮子身上哭泣。                                                    │\033[0m"
	echo -e "\033[32m│      他们告诉我，                                            搬运工:达奚瀚泽 │\033[0m"
	echo -e "\033[32m└────────那只蓝色的海豚，也在梦里想念你。 ——  至秀一  ─────────────────────────┘\033[0m"
	echo -e "\033[33m                                                               主菜单+ / 退出-  \033[0m"
	echo -e "\033[32m  系统版本 - $opsy  架构 - $arch $lbit位  内核版本 - $kern\033[0m"
	checkpip
	echo -e "\033[35m  python推荐版本 - $V1.$V2.$V3  python系统版本 - $U_V1.$U_V2.$U_V3  pip $dx_pip$\033[0m"
	checkwget
	checkcurl
	checkgit
	echo -e "\033[32m  WGET - $dx_wget  CURL - $dx_curl  GIT - $dx_git\033[0m"
	checkscreen
	checkgcc
	checkmake
	echo -e "\033[32m  GCC - $dx_gcc  MAKE - $dx_make  SCREEN - $dx_screen\033[0m"
}

#菜单主体
menu_display(){
	echo -e "\033[33m┌──────────────────────────────── 系 统 命 令  ────────────────────────────────┐\033[0m"
	echo -e "\033[33m│                                                                              │\033[0m"
	echo -e "\033[33m│    0 升级脚本    1 升级内核    2 系统优化    3 系统加固    4 系统其他        │\033[0m"
	echo -e "\033[33m│    5 即将添加    6 即将添加    7 即将添加    8 即将添加    9 更换系统        │\033[0m"
	echo -e "\033[33m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
	echo -e "\033[32m┌──────────────────────────────── 软 件 命 令  ────────────────────────────────┐\033[0m"
	echo -e "\033[32m│                                                                              │\033[0m"
	echo -e "\033[32m│    a Aria2        b 即将添加    c 即将添加    d Docker      e 即将添加       │\033[0m"
	echo -e "\033[32m│    f Fikkerd,Frp  g Git,GDlist  h Hass,H5ai   i 即将添加    j 即将添加       │\033[0m"
	echo -e "\033[32m│    k Kms          l Lnmp        m 即将添加    n 即将添加    o OneinStack     │\033[0m"
	echo -e "\033[32m│    p Python       q 即将添加    r Rclone      s Shadowsocks t 即将添加       │\033[0m"
	echo -e "\033[32m│    u 即将添加     v VMess       w 即将添加    x 即将添加    y 即将添加       │\033[0m"
	echo -e "\033[32m└──────────────────────────────────────────────────────────────────────────────┘\033[0m"
	echo -e "\033[32m 请输入 [0-9、a-z]:\033[0m"
}

#菜单命令
menu_command(){
read -n1 -p "" answer
case $answer in
+)
	menu
	;;
-)
	exit
	;;
0)
	update_menu
	;;
1)
	update_kernel
	;;
2)
	system_optimize
	;;
3)
	echo "即将添加"
	;;
4)
	echo "即将添加"
	;;
5)
	rm -rf dxhz1
	curl -# -o dxhz1 https://raw.githubusercontent.com/reokey/shell/master/data/dxhz1
	sh dxhz1
	;;
6)
	echo "即将添加"
	;;
7)
	echo "即将添加"
	;;
8)
	echo "即将添加"
	;;
9)
	echo "即将添加"
	;;
A|a)
	echo "即将添加"
	;;
B|b)
	echo "即将添加"
	;;
C|c)
	echo "即将添加"
	;;
D|d)
	echo "即将添加"
	;;
E|e)
	echo "即将添加"
	;;
F|f)
	echo "即将添加"
	;;
G|g)
	echo "即将添加"
	;;
H|h)
	echo "即将添加"
	;;
I|i)
	echo "即将添加"
	;;
J|j)
	echo "即将添加"
	;;
K|k)
	echo "即将添加"
	;;
L|l)
	echo "即将添加"
	;;
M|m)
	echo "即将添加"
	;;
N|n)
	echo "即将添加"
	;;
O|o)
	echo "即将添加"
	;;
P|p)
	echo "即将添加"
	;;
Q|q)
	echo "即将添加"
	;;
R|r)
	echo "即将添加"
	;;
S|s)
	echo "即将添加"
	;;
T|t)
	echo "即将添加"
	;;
U|u)
	echo "即将添加"
	;;
V|v)
	echo "即将添加"
	;;
W|w)
	echo "即将添加"
	;;
X|x)
	echo "即将添加"
	;;
Y|y)
	echo "即将添加"
	;;
Z|z)
	echo "即将添加"
	;;
*)
	echo -e "\033[31m按键非指定命令,脚本已退出.\033[0m"
	;;
esac
exit 0
}

#脚本开始
menu
exit
